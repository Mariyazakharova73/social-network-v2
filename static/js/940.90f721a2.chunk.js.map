{"version":3,"file":"static/js/940.90f721a2.chunk.js","mappings":"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","sources":["components/ChatMessages/ChatMessages.tsx","api/chatApi.ts","redux/actions/chatActions.ts","components/ChatMessageForm/ChatMessageForm.tsx","components/Chat/Chat.tsx","components/pages/ChatPage/ChatPage.tsx","../node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js","../node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js"],"sourcesContent":["import React, { FC, UIEvent, useEffect, useRef, useState } from \"react\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport List from \"@mui/material/List\";\r\nimport styles from \"../../App.module.css\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { IChatMessage } from \"./../../redux/types/chatTypes\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ninterface IChatMessageProps {\r\n  message: IChatMessage;\r\n}\r\n\r\nconst Message: FC<IChatMessageProps> = React.memo(({ message }) => {\r\n  return (\r\n    <>\r\n      <ListItem>\r\n        <ListItemAvatar>\r\n          <Avatar alt={message.userName} src={message.photo} />\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          primary={message.userName}\r\n          secondary={\r\n            <>\r\n              <Typography component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                {message.message}\r\n              </Typography>\r\n            </>\r\n          }\r\n        />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n    </>\r\n  );\r\n});\r\n\r\nconst ChatMessages: FC = () => {\r\n  const messages = useSelector((state: AppStateType) => state.chatReducer.messages);\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  const scrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n    const element = e.currentTarget;\r\n    if (element.scrollHeight - element.scrollTop === element.clientHeight) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      ref.current?.scrollIntoView(true);\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div\r\n      style={{ height: \"400px\", overflowY: \"auto\", marginBottom: \"50px\" }}\r\n      onScroll={scrollHandler}\r\n    >\r\n      <List>\r\n        {messages.map((message, index) => {\r\n          return <Message key={index} message={message} />;\r\n        })}\r\n        <div ref={ref}></div>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMessages;\r\n","import { IChatMessage, StatusType } from \"../redux/types/chatTypes\";\r\nimport { WS_URL } from \"../utils/constants\";\r\n\r\ntype MessagesReceivedSubscriberType = (messages: IChatMessage[]) => void;\r\ntype StatusChangedSubscriberType = (status: StatusType) => void;\r\n\r\nconst subscribers = {\r\n  \"messages-received\": [] as MessagesReceivedSubscriberType[],\r\n  \"status-changed\": [] as StatusChangedSubscriberType[],\r\n};\r\n\r\nlet ws: WebSocket | null = null;\r\ntype EventsNamesType = \"messages-received\" | \"status-changed\";\r\n\r\nconst closeHandler = () => {\r\n  console.log(\"close ws\");\r\n  notifysubscribersAboutStatus(\"pending\");\r\n  setTimeout(createWsChannel, 3000);\r\n};\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n  let newMessages = JSON.parse(e.data);\r\n  subscribers[\"messages-received\"].forEach((s) => s(newMessages));\r\n};\r\n\r\nconst openHandler = () => {\r\n  notifysubscribersAboutStatus(\"ready\");\r\n};\r\n\r\nconst errorHandler = () => {\r\n  notifysubscribersAboutStatus(\"error\");\r\n  console.error(\"REFRESH PAGE\");\r\n};\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener(\"close\", closeHandler);\r\n  ws?.removeEventListener(\"message\", messageHandler);\r\n  ws?.removeEventListener(\"open\", openHandler);\r\n  ws?.removeEventListener(\"error\", errorHandler);\r\n};\r\n\r\nconst notifysubscribersAboutStatus = (status: StatusType) => {\r\n  subscribers[\"status-changed\"].forEach((s) => {\r\n    s(status);\r\n  });\r\n};\r\n\r\nconst createWsChannel = () => {\r\n  cleanUp();\r\n  ws?.close();\r\n  ws = new WebSocket(WS_URL);\r\n  notifysubscribersAboutStatus(\"pending\");\r\n  ws?.addEventListener(\"close\", closeHandler);\r\n  ws?.addEventListener(\"message\", messageHandler);\r\n  ws?.addEventListener(\"open\", openHandler);\r\n  ws?.addEventListener(\"error\", errorHandler);\r\n};\r\n\r\nexport const chatApi = {\r\n  start() {\r\n    createWsChannel();\r\n  },\r\n  stop() {\r\n    subscribers[\"messages-received\"] = [];\r\n    subscribers[\"status-changed\"] = [];\r\n    cleanUp();\r\n    ws?.close();\r\n  },\r\n  subscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\r\n  ) {\r\n    // @ts-ignore\r\n    subscribers[eventName].push(callback);\r\n    return () => {\r\n      // @ts-ignore\r\n      subscribers[eventName] = subscribers[eventName].filter((s) => s !== callback);\r\n    };\r\n  },\r\n  unsubscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\r\n  ) {\r\n    // @ts-ignore\r\n    subscribers[eventName] = subscribers[eventName].filter((s) => s !== callback);\r\n  },\r\n  sendMessage(message: string) {\r\n    ws?.send(message);\r\n  },\r\n};\r\n","import { AppDispatch, BaseThunkType } from \"../redux-store\";\r\nimport {\r\n  ActionTypes,\r\n  IChatMessage,\r\n  ISetMessagesAction,\r\n  MESSAGES_RECEVIED,\r\n  StatusType,\r\n  IChangeStatusAction,\r\n  CHAT_STATUS_CHANGED,\r\n} from \"./../types/chatTypes\";\r\nimport { chatApi } from \"./../../api/chatApi\";\r\n\r\nlet _newMessageHandler: ((messages: IChatMessage[]) => void) | null = null;\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\n\r\nconst newMessageHandlerCreator = (dispatch: AppDispatch) => {\r\n  if (_newMessageHandler === null) {\r\n    _newMessageHandler = (messages) => {\r\n      dispatch(setMessages(messages));\r\n    };\r\n  }\r\n  return _newMessageHandler;\r\n};\r\n\r\nconst statusChangedHandlerCreator = (dispatch: AppDispatch) => {\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(changeStatus(status));\r\n    };\r\n  }\r\n  return _statusChangedHandler;\r\n};\r\n\r\nexport const setMessages = (messages: IChatMessage[]): ISetMessagesAction => {\r\n  return {\r\n    type: MESSAGES_RECEVIED,\r\n    payload: messages,\r\n  };\r\n};\r\n\r\nexport const startMessagesListeningThunkCreator = (): BaseThunkType<ActionTypes> => {\r\n  return async (dispatch) => {\r\n    chatApi.start();\r\n    chatApi.subscribe(\"messages-received\", newMessageHandlerCreator(dispatch));\r\n    chatApi.subscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n  };\r\n};\r\n\r\nexport const stopMessagesListeningThunkCreator = (): BaseThunkType<ActionTypes> => {\r\n  return async (dispatch) => {\r\n    chatApi.unsubscribe(\"messages-received\", newMessageHandlerCreator(dispatch));\r\n    chatApi.unsubscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n    chatApi.stop();\r\n  };\r\n};\r\n\r\nexport const sendMessageThunkCreator = (message: string): BaseThunkType<ActionTypes> => {\r\n  return async (dispatch) => {\r\n    chatApi.sendMessage(message);\r\n  };\r\n};\r\n\r\nexport const changeStatus = (status: StatusType): IChangeStatusAction => {\r\n  return {\r\n    type: CHAT_STATUS_CHANGED,\r\n    payload: status,\r\n  };\r\n};\r\n","import React, { FC } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport { Formik, Form as FormikForm } from \"formik\";\r\nimport { messageSchema } from \"../../utils/validators\";\r\nimport { createField } from \"../../utils/helpers\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\r\nimport { sendMessageThunkCreator } from \"../../redux/actions/chatActions\";\r\n\r\nconst ChatMessageForm: FC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const status = useSelector((state: AppStateType) => state.chatReducer.status);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        message: \"\",\r\n      }}\r\n      onSubmit={(values, { resetForm }) => {\r\n        if (!values.message) return;\r\n\r\n        dispatch(sendMessageThunkCreator(values.message));\r\n        resetForm();\r\n      }}\r\n      validationSchema={messageSchema}\r\n      validateOnBlur\r\n    >\r\n      {({ values, handleChange, errors, touched, dirty }) => (\r\n        <FormikForm>\r\n          {createField(\r\n            \"message\",\r\n            null,\r\n            touched,\r\n            errors,\r\n            \"text\",\r\n            \"medium\",\r\n            false,\r\n            \"Enter your message\",\r\n            \"filled\",\r\n            true\r\n          )}\r\n          <Box mt={2}>\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              endIcon={<SendIcon />}\r\n              disabled={!dirty || !!errors.message || status !== \"ready\"}\r\n            >\r\n              Send\r\n            </Button>\r\n          </Box>\r\n        </FormikForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ChatMessageForm;\r\n","import React, { FC, useEffect } from \"react\";\r\nimport ChatMessages from \"./../ChatMessages/ChatMessages\";\r\nimport ChatMessageForm from \"./../ChatMessageForm/ChatMessageForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  startMessagesListeningThunkCreator,\r\n  stopMessagesListeningThunkCreator,\r\n} from \"../../redux/actions/chatActions\";\r\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\r\n\r\nconst Chat: FC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const status = useSelector((state: AppStateType) => state.chatReducer.status);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListeningThunkCreator());\r\n    return () => {\r\n      dispatch(stopMessagesListeningThunkCreator());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {status === \"error\" && <p>Some error occured. Please refresh the page</p>}\r\n      <ChatMessages />\r\n      <ChatMessageForm />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { FC } from \"react\";\r\nimport Chat from \"./../../Chat/Chat\";\r\n\r\nconst ChatPage: FC = () => {\r\n  return <Chat/>;\r\n};\r\n\r\nexport default ChatPage;\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getListItemAvatarUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemAvatar', slot);\n}\nconst listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);\nexport default listItemAvatarClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport ListContext from '../List/ListContext';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getListItemAvatarUtilityClass } from './listItemAvatarClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemAvatarUtilityClass, classes);\n};\nconst ListItemAvatarRoot = styled('div', {\n  name: 'MuiListItemAvatar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];\n  }\n})(({\n  ownerState\n}) => _extends({\n  minWidth: 56,\n  flexShrink: 0\n}, ownerState.alignItems === 'flex-start' && {\n  marginTop: 8\n}));\n\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\nconst ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemAvatar'\n  });\n  const {\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = React.useContext(ListContext);\n  const ownerState = _extends({}, props, {\n    alignItems: context.alignItems\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListItemAvatarRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemAvatar;"],"names":["Message","React","_ref","message","_jsxs","_Fragment","children","ListItem","_jsx","ListItemAvatar","Avatar","alt","userName","src","photo","ListItemText","primary","secondary","Typography","component","variant","color","Divider","messages","useSelector","state","chatReducer","ref","useRef","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","useEffect","_ref$current","current","scrollIntoView","style","height","overflowY","marginBottom","onScroll","e","element","currentTarget","scrollHeight","scrollTop","clientHeight","List","map","index","subscribers","ws","closeHandler","console","log","notifysubscribersAboutStatus","setTimeout","createWsChannel","messageHandler","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","error","cleanUp","_ws","_ws2","_ws3","_ws4","removeEventListener","status","_ws5","_ws6","_ws7","_ws8","_ws9","close","WebSocket","WS_URL","addEventListener","chatApi","_ws10","eventName","callback","push","filter","_ws11","send","_newMessageHandler","_statusChangedHandler","newMessageHandlerCreator","dispatch","setMessages","statusChangedHandlerCreator","changeStatus","type","MESSAGES_RECEVIED","payload","CHAT_STATUS_CHANGED","useDispatch","Formik","initialValues","onSubmit","values","resetForm","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","wrap","_context3","prev","next","stop","_x3","apply","arguments","validationSchema","messageSchema","validateOnBlur","_ref2","handleChange","errors","touched","dirty","FormikForm","createField","Box","mt","Button","endIcon","SendIcon","disabled","_callee","_context","_x","_callee2","_context2","_x2","ChatMessages","ChatMessageForm","Chat","getListItemAvatarUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListItemAvatarRoot","styled","name","overridesResolver","props","styles","ownerState","root","alignItems","alignItemsFlexStart","_extends","minWidth","flexShrink","marginTop","inProps","useThemeProps","className","other","_objectWithoutPropertiesLoose","context","ListContext","classes","slots","composeClasses","useUtilityClasses","clsx"],"sourceRoot":""}