{"version":3,"file":"static/js/4.ffb802ca.chunk.js","mappings":"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","sources":["redux/selectors/chatSelectors.ts","../node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js","../node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js","components/ChatMessage/ChatMessage.tsx","webpack://social-network/./src/components/ChatMessages/ChatMessages.module.css?8750","components/ChatMessages/ChatMessages.tsx","api/chatApi.ts","redux/actions/chatActions.ts","components/ChatMessageForm/ChatMessageForm.tsx","components/Chat/Chat.tsx","pages/ChatPage/ChatPage.tsx"],"sourcesContent":["import { AppStateType } from \"../redux-store\";\r\n\r\nexport const selectStatus = (state: AppStateType) => {\r\n  return state.chatReducer.status;\r\n};\r\n\r\nexport const selectChatMesssages = (state: AppStateType) => {\r\n  return state.chatReducer.messages;\r\n};\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getListItemAvatarUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemAvatar', slot);\n}\nconst listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);\nexport default listItemAvatarClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport ListContext from '../List/ListContext';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getListItemAvatarUtilityClass } from './listItemAvatarClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemAvatarUtilityClass, classes);\n};\nconst ListItemAvatarRoot = styled('div', {\n  name: 'MuiListItemAvatar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];\n  }\n})(({\n  ownerState\n}) => _extends({\n  minWidth: 56,\n  flexShrink: 0\n}, ownerState.alignItems === 'flex-start' && {\n  marginTop: 8\n}));\n\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\nconst ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemAvatar'\n  });\n  const {\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = React.useContext(ListContext);\n  const ownerState = _extends({}, props, {\n    alignItems: context.alignItems\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListItemAvatarRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemAvatar;","import React, { FC } from \"react\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { IChatMessage } from \"../../redux/types/chatTypes\";\r\n\r\ninterface IChatMessageProps {\r\n  message: IChatMessage;\r\n}\r\n\r\nconst Message: FC<IChatMessageProps> = React.memo(({ message }) => {\r\n  return (\r\n    <>\r\n      <ListItem>\r\n        <ListItemAvatar>\r\n          <Avatar alt={message.userName} src={message.photo} />\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          primary={message.userName}\r\n          secondary={\r\n            <>\r\n              <Typography component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                {message.message}\r\n              </Typography>\r\n            </>\r\n          }\r\n        />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Message;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ChatMessages_wrapper__w7ZjQ\"};","import React, { FC, UIEvent, useEffect, useRef, useState } from \"react\";\r\nimport List from \"@mui/material/List\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChatMesssages } from \"../../redux/selectors/chatSelectors\";\r\nimport Message from \"../ChatMessage/ChatMessage\";\r\nimport s from \"./ChatMessages.module.css\";\r\n\r\nconst ChatMessages: FC = () => {\r\n  const messages = useSelector(selectChatMesssages);\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  const scrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n    const element = e.currentTarget;\r\n    if (element.scrollHeight - element.scrollTop === element.clientHeight) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      ref.current?.scrollIntoView(true);\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div\r\n      className={s.wrapper}\r\n      onScroll={scrollHandler}\r\n    >\r\n      <List>\r\n        {messages.map((message, index) => {\r\n          return <Message key={index} message={message} />;\r\n        })}\r\n        <div ref={ref}></div>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMessages;\r\n","import { IChatMessage, StatusType } from \"../redux/types/chatTypes\";\r\nimport { WS_URL } from \"../utils/constants\";\r\n\r\ntype MessagesReceivedSubscriberType = (messages: IChatMessage[]) => void;\r\ntype StatusChangedSubscriberType = (status: StatusType) => void;\r\n\r\nconst subscribers = {\r\n  \"messages-received\": [] as MessagesReceivedSubscriberType[],\r\n  \"status-changed\": [] as StatusChangedSubscriberType[],\r\n};\r\n\r\nlet ws: WebSocket | null = null;\r\ntype EventsNamesType = \"messages-received\" | \"status-changed\";\r\n\r\nconst closeHandler = () => {\r\n  notifysubscribersAboutStatus(\"pending\");\r\n  setTimeout(createWsChannel, 3000);\r\n};\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n  let newMessages = JSON.parse(e.data);\r\n  subscribers[\"messages-received\"].forEach((s) => s(newMessages));\r\n};\r\n\r\nconst openHandler = () => {\r\n  notifysubscribersAboutStatus(\"ready\");\r\n};\r\n\r\nconst errorHandler = () => {\r\n  notifysubscribersAboutStatus(\"error\");\r\n  console.error(\"REFRESH PAGE\");\r\n};\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener(\"close\", closeHandler);\r\n  ws?.removeEventListener(\"message\", messageHandler);\r\n  ws?.removeEventListener(\"open\", openHandler);\r\n  ws?.removeEventListener(\"error\", errorHandler);\r\n};\r\n\r\nconst notifysubscribersAboutStatus = (status: StatusType) => {\r\n  subscribers[\"status-changed\"].forEach((s) => {\r\n    s(status);\r\n  });\r\n};\r\n\r\nconst createWsChannel = () => {\r\n  cleanUp();\r\n  ws?.close();\r\n  ws = new WebSocket(WS_URL);\r\n  notifysubscribersAboutStatus(\"pending\");\r\n  ws?.addEventListener(\"close\", closeHandler);\r\n  ws?.addEventListener(\"message\", messageHandler);\r\n  ws?.addEventListener(\"open\", openHandler);\r\n  ws?.addEventListener(\"error\", errorHandler);\r\n};\r\n\r\nexport const chatApi = {\r\n  start() {\r\n    createWsChannel();\r\n  },\r\n  stop() {\r\n    subscribers[\"messages-received\"] = [];\r\n    subscribers[\"status-changed\"] = [];\r\n    cleanUp();\r\n    ws?.close();\r\n  },\r\n  subscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\r\n  ) {\r\n    // @ts-ignore\r\n    subscribers[eventName].push(callback);\r\n    return () => {\r\n      // @ts-ignore\r\n      subscribers[eventName] = subscribers[eventName].filter((s) => s !== callback);\r\n    };\r\n  },\r\n  unsubscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\r\n  ) {\r\n    // @ts-ignore\r\n    subscribers[eventName] = subscribers[eventName].filter((s) => s !== callback);\r\n  },\r\n  sendMessage(message: string) {\r\n    ws?.send(message);\r\n  },\r\n};\r\n","import { AppDispatch, BaseThunkType } from \"../redux-store\";\r\nimport {\r\n  ActionTypes,\r\n  IChatMessage,\r\n  ISetMessagesAction,\r\n  MESSAGES_RECEVIED,\r\n  StatusType,\r\n  IChangeStatusAction,\r\n  CHAT_STATUS_CHANGED,\r\n} from \"./../types/chatTypes\";\r\nimport { chatApi } from \"./../../api/chatApi\";\r\n\r\nlet _newMessageHandler: ((messages: IChatMessage[]) => void) | null = null;\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\n\r\nconst newMessageHandlerCreator = (dispatch: AppDispatch) => {\r\n  if (_newMessageHandler === null) {\r\n    _newMessageHandler = (messages) => {\r\n      dispatch(setMessages(messages));\r\n    };\r\n  }\r\n  return _newMessageHandler;\r\n};\r\n\r\nconst statusChangedHandlerCreator = (dispatch: AppDispatch) => {\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(changeStatus(status));\r\n    };\r\n  }\r\n  return _statusChangedHandler;\r\n};\r\n\r\nexport const setMessages = (messages: IChatMessage[]): ISetMessagesAction => {\r\n  return {\r\n    type: MESSAGES_RECEVIED,\r\n    payload: messages,\r\n  };\r\n};\r\n\r\nexport const startMessagesListeningThunkCreator = (): BaseThunkType<ActionTypes> => {\r\n  return async (dispatch) => {\r\n    chatApi.start();\r\n    chatApi.subscribe(\"messages-received\", newMessageHandlerCreator(dispatch));\r\n    chatApi.subscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n  };\r\n};\r\n\r\nexport const stopMessagesListeningThunkCreator = (): BaseThunkType<ActionTypes> => {\r\n  return async (dispatch) => {\r\n    chatApi.unsubscribe(\"messages-received\", newMessageHandlerCreator(dispatch));\r\n    chatApi.unsubscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n    chatApi.stop();\r\n  };\r\n};\r\n\r\nexport const sendMessageThunkCreator = (message: string): BaseThunkType<ActionTypes> => {\r\n  return async (dispatch) => {\r\n    chatApi.sendMessage(message);\r\n  };\r\n};\r\n\r\nexport const changeStatus = (status: StatusType): IChangeStatusAction => {\r\n  return {\r\n    type: CHAT_STATUS_CHANGED,\r\n    payload: status,\r\n  };\r\n};\r\n","import React, { FC } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport { Formik, Form as FormikForm } from \"formik\";\r\nimport { messageSchema } from \"../../utils/validators\";\r\nimport { createField } from \"../../utils/helpers\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"../../redux/redux-store\";\r\nimport { sendMessageThunkCreator } from \"../../redux/actions/chatActions\";\r\nimport { selectStatus } from \"./../../redux/selectors/chatSelectors\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst ChatMessageForm: FC = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const status = useSelector(selectStatus);\r\n\r\n  const submitMessageData = (\r\n    values: { message: string },\r\n    { resetForm }: { resetForm: () => void }\r\n  ) => {\r\n    if (!values.message) return;\r\n\r\n    dispatch(sendMessageThunkCreator(values.message));\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        message: \"\",\r\n      }}\r\n      onSubmit={submitMessageData}\r\n      validationSchema={messageSchema}\r\n      validateOnBlur\r\n    >\r\n      {({ values, handleChange, errors, touched, dirty }) => (\r\n        <FormikForm>\r\n          {createField(\"message\", t(\"chatMessage\"), touched, errors, t)}\r\n          <Box mt={2}>\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              endIcon={<SendIcon />}\r\n              disabled={!dirty || !!errors.message || status !== \"ready\"}\r\n            >\r\n              {t(\"buttonSend\")}\r\n            </Button>\r\n          </Box>\r\n        </FormikForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ChatMessageForm;\r\n","import React, { FC, useEffect } from \"react\";\r\nimport ChatMessages from \"../ChatMessages/ChatMessages\";\r\nimport ChatMessageForm from \"./../ChatMessageForm/ChatMessageForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  startMessagesListeningThunkCreator,\r\n  stopMessagesListeningThunkCreator,\r\n} from \"../../redux/actions/chatActions\";\r\nimport { AppDispatch } from \"../../redux/redux-store\";\r\nimport { selectStatus } from \"./../../redux/selectors/chatSelectors\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Chat: FC = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const status = useSelector(selectStatus);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListeningThunkCreator());\r\n    return () => {\r\n      dispatch(stopMessagesListeningThunkCreator());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {status === \"error\" && <p>{t(\"error\")}</p>}\r\n      <ChatMessages />\r\n      <ChatMessageForm />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { FC } from \"react\";\r\nimport Chat from \"../../components/Chat/Chat\";\r\n\r\nconst ChatPage: FC = () => {\r\n  return (\r\n    <div style={{ height: \"100vh\" }}>\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"names":["selectStatus","state","chatReducer","status","selectChatMesssages","messages","getListItemAvatarUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListItemAvatarRoot","styled","name","overridesResolver","props","styles","ownerState","root","alignItems","alignItemsFlexStart","_ref","_extends","minWidth","flexShrink","marginTop","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","context","ListContext","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","message","_jsxs","_Fragment","children","ListItem","ListItemAvatar","Avatar","alt","userName","src","photo","ListItemText","primary","secondary","Typography","component","variant","color","Divider","useSelector","useRef","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","useEffect","_ref$current","current","scrollIntoView","s","onScroll","e","element","currentTarget","scrollHeight","scrollTop","clientHeight","List","map","index","Message","subscribers","ws","closeHandler","notifysubscribersAboutStatus","setTimeout","createWsChannel","messageHandler","newMessages","JSON","parse","data","forEach","openHandler","errorHandler","console","error","cleanUp","_ws","_ws2","_ws3","_ws4","removeEventListener","_ws5","_ws6","_ws7","_ws8","_ws9","close","WebSocket","WS_URL","addEventListener","chatApi","_ws10","eventName","callback","push","filter","_ws11","send","_newMessageHandler","_statusChangedHandler","newMessageHandlerCreator","dispatch","setMessages","statusChangedHandlerCreator","changeStatus","type","MESSAGES_RECEVIED","payload","CHAT_STATUS_CHANGED","t","useTranslation","useDispatch","Formik","initialValues","onSubmit","values","resetForm","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","wrap","_context3","prev","next","stop","_x3","apply","arguments","validationSchema","messageSchema","validateOnBlur","_ref2","handleChange","errors","touched","dirty","FormikForm","createField","Box","mt","Button","endIcon","SendIcon","disabled","_callee","_context","_x","_callee2","_context2","_x2","ChatMessages","ChatMessageForm","style","height","Chat"],"sourceRoot":""}